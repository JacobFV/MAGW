from . import Base_Actor_Critic_Algorithm

class Model_Based_Algorithm(Base_Actor_Critic_Algorithm):
    """Simple model-based actor critic agent"""
    pass #TODO code is in colab

    def save(self, path): pass
    def restore(self, path): pass

    def __init__(self, observation_space, action_space):\n",
    "        state_size = 64\n",
    "        \n",
    "        self.state_encoder = snt.Sequential([\n",
    "            snt.Linear(128),\n",
    "            tf.nn.relu,\n",
    "            snt.Linear(64),\n",
    "            tf.nn.swish,\n",
    "            snt.Linear(state_size)\n",
    "        ])\n",
    "        \n",
    "        self.state_decoder = snt.Sequential([\n",
    "            snt.Linear(128),\n",
    "            tf.nn.relu,\n",
    "            snt.Linear(64),\n",
    "            tf.nn.swish,\n",
    "            snt.Linear(state_size)\n",
    "        ])\n",
    "        \n",
    "        self.policy = snt.Sequential([\n",
    "            snt.Linear(64),\n",
    "            tf.nn.swish,\n",
    "            snt.Linear(64),\n",
    "            tf.nn.swish,\n",
    "            snt.Linear(action_space.shape[0])\n",
    "        ])\n",
    "        \n",
    "        self.pred_L1A = tf.nn.swish(snt.Linear(int(state_size/2)))\n",
    "        self.pred_L1B = tf.nn.swish(snt.Linear(int(state_size/2)))\n",
    "        self.pred_L2 = tf.nn.swish(snt.Linear(state_size))\n",
    "        self.pred_L3 = snt.Linear(observation_space.shape[0])\n",
    "        \n",
    "        self.value_fn = snt.Sequential([\n",
    "            snt.Linear(32),\n",
    "            tf.nn.swish,\n",
    "            snt.Linear(16),\n",
    "            tf.nn.swish,\n",
    "            snt.Linear(1)\n",
    "        ])\n",
    "    \n",
    "    def act(self, obs):\n",
    "        obs = np.expand_dims(obs, 0) #create a batch of size 1\n",
    "        state = self.state_encoder(obs)\n",
    "        action = self.policy(state)\n",
    "        return action[0] #this is the only output in the batch\n",
    "    \n",
    "    def pred(self, obs, a):\n",
    "        obs = np.expand_dims(obs, 0) #create a batch of size 1\n",
    "        a = np.expand_dims(a, 0) #create a batch of size 1\n",
    "        \n",
    "        hidden_1A = self.pred_L1A(obs)\n",
    "        hidden_1B = self.pred_L1B(a)\n",
    "        hidden_2 = self.pred_L2(tf.concat([hidden_1A, hidden_1B], axis=1))\n",
    "        pred = self.pred_L3(hidden_2)\n",
    "        \n",
    "        return pred[0] #this is the only output in the batch\n",
    "    \n",
    "    def "